AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  webzone

  Sample SAM Template for webzone

Parameters:
  GitCloneUrl: {Type: String}
  WebsiteBucketName: {Type: String}
  WebsiteHostname: {Type: String}
  
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 60

Resources:
  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref WebsiteBucketName
      WebsiteConfiguration:
        IndexDocument: 'index.html'
        ErrorDocument: '404.html'

  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    DependsOn: WebsiteBucket
    Properties:
      Bucket: !Ref WebsiteBucketName
      PolicyDocument:
        Version: 2012-10-17
        Id: AllowCloudfrontAccess
        Statement:
        - Sid: AllowPublicReadAccess
          Effect: Allow
          Principal: '*'
          Action: 's3:GetObject'
          Resource: !Sub 'arn:aws:s3:::${WebsiteBucketName}/*'

  RebuilderFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    DependsOn: CfDistribution
    Metadata:
      DockerContext: ./rebuild_function
      Dockerfile: Dockerfile
      DockerTag: python3.9-v1
    Properties:
      PackageType: Image
      Architectures:
      #- x86_64
      - arm64
      Environment:
        Variables:
          GIT_CLONE_URL: !Ref GitCloneUrl
          WEBSITE_BUCKET_NAME: !Ref WebsiteBucketName
          DISTRIBUTION_ID: !Ref CfDistribution
      Policies:
      # List of S3 Actions (it is easier to find the Fountain of Youth than this list):
      # https://docs.aws.amazon.com/AmazonS3/latest/userguide/list_amazons3.html#amazons3-actions-as-permissions
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action: 'cloudfront:CreateInvalidation'
          Resource: !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${CfDistribution}'
        - Effect: Allow
          Action:
          - 's3:PutObject'
          - 's3:DeleteObject'
          Resource: !Sub 'arn:aws:s3:::${WebsiteBucketName}/*'
        - Effect: Allow
          Action:
          - 's3:ListBucket'
          Resource: !GetAtt WebsiteBucket.Arn
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal: '*'
          Action: 'lambda:InvokeFunctionUrl'
          Resource: !GetAtt RebuilderFunction.Arn
          Condition:
            StringEquals:
              'lambda:FunctionUrlAuthType': NONE

  RebuilderFunctionUrl:
    Type: AWS::Lambda::Url
    Properties:
      TargetFunctionArn: !GetAtt RebuilderFunction.Arn
      Qualifier: rebuild-webzone
      AuthType: NONE

  CfDistribution:
    Type: AWS::CloudFront::Distribution
    DependsOn: WebsiteBucket
    Properties:
      DistributionConfig:
        Aliases:
        - !Ref WebsiteHostname
        Enabled: true
        IPV6Enabled: true
        CustomErrorResponses:
        - ErrorCode: 403
          ResponseCode: 404
          ResponsePagePath: /404.html
        DefaultCacheBehavior:
          AllowedMethods: [GET, HEAD]
          ForwardedValues: {QueryString: false}
          TargetOriginId: s3
          ViewerProtocolPolicy: redirect-to-https
        ViewerCertificate:
          AcmCertificateArn: !Ref CfDistributionCert
          SslSupportMethod: sni-only
        Origins:
        - Id: s3
          DomainName: !Sub '${WebsiteBucketName}.s3-website.${AWS::Region}.amazonaws.com'
          CustomOriginConfig:
            OriginProtocolPolicy: http-only

  CfDistributionCert:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref WebsiteHostname
      ValidationMethod: DNS

# vim:set ts=2 sw=2 et:
